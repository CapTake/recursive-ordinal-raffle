const numWinners = 10;
const totalTickets = 100;
const id = Number(document.querySelector("script[c]").getAttribute("c") || 0);
let b = document.body;
if (!b) {
	b = document.createElement("body");
    document.documentElement.appendChild(b);
}
function MT(seed) {
	const N = 624;
	const M = 397;

	function twist(state) {
		const DIFF = N - M;
		const M_MINUS_1 = 396;
		const N_MINUS_1 = 623;
		const MATRIX_A = 0x9908b0df;
		const UPPER_MASK = 0x80000000;
		const LOWER_MASK = 0x7fffffff;
		let bits;
		// first 624-397=227 words
		for (let i = 0; i < DIFF; i++) {
			bits = (state[i] & UPPER_MASK) | (state[i + 1] & LOWER_MASK);
			state[i] = state[i + M] ^ (bits >>> 1) ^ ((bits & 1) * MATRIX_A);
		}
		// remaining words (except the very last one)
		for (let i = DIFF; i < N_MINUS_1; i++) {
			bits = (state[i] & UPPER_MASK) | (state[i + 1] & LOWER_MASK);
			state[i] = state[i - DIFF] ^ (bits >>> 1) ^ ((bits & 1) * MATRIX_A);
		}
		// last word is computed pretty much the same way, but i + 1 must wrap around to 0
		bits = (state[N_MINUS_1] & UPPER_MASK) | (state[0] & LOWER_MASK);
		state[N_MINUS_1] =
			state[M_MINUS_1] ^ (bits >>> 1) ^ ((bits & 1) * MATRIX_A);
		return state;
	}
	// The original algorithm used 5489 as the default seed
	function initialize(seed = Date.now()) {
		let state = new Array(N);
		// fill initial state
		state[0] = seed;
		for (let i = 1; i < N; i++) {
			let s = state[i - 1] ^ (state[i - 1] >>> 30);
			// avoid multiplication overflow: split 32 bits into 2x 16 bits and process them individually
			state[i] =
				((((s & 0xffff0000) >>> 16) * 1812433253) << 16) +
				(s & 0x0000ffff) * 1812433253 +
				i;
		}
		return twist(state);
	}
	let state = initialize(seed);
	let next = 0;
	let randomInt32 = () => {
		let x;

		if (next >= N) {
			state = twist(state);
			next = 0;
		}

		x = state[next++];

		// Tempering
		x ^= x >>> 11;
		x ^= (x << 7) & 0x9d2c5680;
		x ^= (x << 15) & 0xefc60000;
		x ^= x >>> 18;

		// Convert to unsigned
		return x >>> 0;
	};
	let api = {
		// [0,0xffffffff]
		genrand_int32: () => randomInt32(),
		// [0,0x7fffffff]
		genrand_int31: () => randomInt32() >>> 1,
		// [0,1]
		genrand_real1: () => randomInt32() * (1.0 / 4294967295.0),
		// [0,1)
		genrand_real2: () => randomInt32() * (1.0 / 4294967296.0),
		// (0,1)
		genrand_real3: () => (randomInt32() + 0.5) * (1.0 / 4294967296.0),
		// [0,1), 53-bit resolution
		genrand_res53: () => {
			let a = randomInt32() >>> 5;
			let b = randomInt32() >>> 6;

			return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
		},

		randomNumber: () => randomInt32(),
		random31Bit: () => api.genrand_int31(),
		randomInclusive: () => api.genrand_real1(),
		random: () => api.genrand_real2(), // returns values just like Math.random
		randomExclusive: () => api.genrand_real3(),
		random53Bit: () => api.genrand_res53(),
	};

	return api;
}
// random x winners out of y
const xOfy = (x, y, seed) => {
    const { random } = MT(seed);
    const all = [];
    for(let i = 1; i <= y; i++) {
        all.push(i);
    }
    all.sort(() => random() - 0.5);
    return all.slice(0, x);
}

const good = [
    "üíé",
    "üåü",
    "üîî",
    "üéÅ",
];
const bad = "‚ùåÔ∏è";
// map winning number based on it's place, to emoji place >= 0
const moji = (place, winningPlaces = 1) => {
    const mod = good.length;
    const res = [good[place % mod]];
    let n = Math.floor(place / mod);
    res.push(good[n % mod]);
    n = Math.floor(n / mod);
    res.push(good[n % mod]);
    if (place >= winningPlaces) {
        res[place % 3] = bad;
    }
    return res.reverse();
}
const seed = 123456;
// ticket id
const scratch = (ticketNumber, totalTickets, seed) => {
    const { random } = MT(seed);
    const all = [];
    for(let i = 1; i <= totalTickets; i++) {
        all.push(i);
    }
    all.sort(() => random() - 0.5);
    console.log(ticketNumber, all.indexOf(ticketNumber));
    return moji(all.indexOf(ticketNumber), numWinners);
}
const winners = xOfy(totalTickets, totalTickets, seed);
const res = winners.map((n, i) => [n, moji(i, numWinners)]);
console.table(res);
const combo = scratch(id, totalTickets, seed);
console.log(`Raffle ticket: ${id}`);
b.innerHTML = `<style>
.flex { display: flex; justify-content: center; align-items: center;}
.w-full { width: 100%;}
body {
display: flex; flex-direction: column; justify-content: center; align-items: center; margin: 0px; padding: 0px; background: #000; min-height: 100%; color:#fff;
background: #000;
}
body:empty{display:none}
#h1 { text-decoration: none; color: #fff; font-size: 5vmin; font-family: sans-serif; padding: 3vmin; transition:all .3s ease;}
footer {padding: 5vmin; font-size: 3vmin;}
#items { font-size:10vmin; gap: 1vmin;}
#items div{ width: 20%; padding: 3.5vmin 0; text-align: center; border: 1vmin dashed #000; background: #fff;}
</style>
<div class="flex" style="width: 100vmin; height: 100vmin; flex-direction: column; justify-content: space-between;">
<h1 id="h1">Ticket #${id}</h1>
<div id="wizzardo" class="flex w-full">
    <div id="items" class="flex w-full">
        <div>‚ùìÔ∏è</div>
        <div>‚ùìÔ∏è</div>
        <div>‚ùìÔ∏è</div>
    </div>
    </div>
<footer>
raffles.xyz
</footer>
</div>
`;
const items = document.querySelector('#items');
const delay = 50;
const symbs = [...good, bad, ...good];
let times = 120;
let reel = 0;
const reveal = () => {
    const i = times % good.length;
    if (times > 0 && delay > 0 && reel < 3) {
        times--;
        if (times === 0) {
            reel++;
            times = 100;
        }
        const a = reel > 0 ? combo[0] : symbs[i];
        const b = reel > 1 ? combo[1] : symbs[i + 1];
        const c = reel > 2 ? combo[2] : symbs[i + 2];
        items.innerHTML = `<div>${a}</div><div>${b}</div><div>${c}</div>`;
        setTimeout(reveal, delay);
    } else {
        items.innerHTML = `<div>${combo[0]}</div><div>${combo[1]}</div><div>${combo[2]}</div>`;
    }
}
reveal();